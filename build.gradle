// Tasks to perform when no task is specified
defaultTasks 'clean', 'build', 'shadowJar'

// Plugins used
apply plugin: 'java' // Specifies a java project
apply plugin: 'application' // Adds the 'run' task
apply plugin: 'project-report' // Adds project report tasks
apply plugin: 'eclipse' // Adds eclipse project tasks
apply plugin: 'idea' // Adds idea project tasks
apply plugin: 'com.github.johnrengelman.shadow' // Provides dependency shading
apply plugin: 'com.github.cr0.macappbundle'
apply plugin: 'launch4j'

// Methods to determine detailed version string
def gitDescribe() {
    try {
        // determine git-describe output
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--always', '--dirty=*'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (e) {
        return "unknown"
    }
}

def getVersionName() {
    try {
        // determine git-describe output
        def version = gitDescribe()

        // add on jenkins or travis build information
        def jenkins_build = System.getenv("BUILD_NUMBER")
        def travis_build = System.getenv("TRAVIS_BUILD_NUMBER")
        if (jenkins_build != null) {
            version += "-b" + jenkins_build
        } else if (travis_build != null) {
            version += "-trv" + travis_build
        } else {
            version += "-dev"
        }

        return version
    } catch (e) {
        return "unknown-version"
    }
}

// Basic project information
group = 'com.groovesquid'
version = '0.9.2-SNAPSHOT'
description = "Groovesquid"
mainClassName = "com.groovesquid.Groovesquid"

// Extended project information
ext.url = 'https://github.com/groovesquid/groovesquid'
ext.gitDescribe = getVersionName()

// Minimum Java version required
sourceCompatibility = '1.6'
targetCompatibility = '1.6'

// Compile encoding
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked"
}

// Simple build script information
buildscript {
    repositories {
        maven { url "http://jcenter.bintray.com" }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.1'
        classpath 'com.github.cr0:gradle-macappbundle-plugin:3.0.1'
        classpath 'edu.sc.seis.gradle:launch4j:1.0.6'
    }
}

// Configuration settings to check for new snapshots
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // Always check for new snapshots
}

// Repositories storing our dependencies
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies used by our project
dependencies {
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'org.apache.httpcomponents:httpclient:4.3.5'
    compile 'org.apache.httpcomponents:httpcore:4.3.2'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-validator:commons-validator:1.4.0'
    compile 'commons-collections:commons-collections:3.2.2'
    compile 'org.swinglabs:swing-layout:1.0.3'
    compile 'org.swinglabs:swingx:1.6.1'
    compile 'com.typesafe:config:1.3.0'
    compile 'com.yuvimasory:orange-extensions:1.3.0'
    compile 'com.eclipsesource.minimal-json:minimal-json:0.9.2'
    compile 'com.mpatric:mp3agic:0.8.3'
    compile 'org.bouncycastle:bcprov-jdk16:1.46'
    compile 'org.divxdede:jbusycomponent:1.2.3'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.11'
}

// Eclipse project name
eclipse {
    project {
        name = 'Groovesquid'
    }
}

// Jar manifest information
jar.manifest.mainAttributes(
        'Main-Class': "com.groovesquid.Groovesquid",
        'Sealed': true
)

// Used to create .app bundle
macAppBundle {
    appName = "Groovesquid"
    appCategory = "public.app-category.utilities"
    icon = "gradle/icon/icon.icns"

    mainClassName = "com.groovesquid.Groovesquid"

    bundleJRE = false
    bundleExecutable = "Groovesquid"
    bundleIdentifier = "com.groovesquid"

    bundleExtras.put("NSHighResolutionCapable", "true")

    javaProperties.put("file.encoding", "utf-8")
    javaProperties.put("apple.laf.useScreenMenuBar", true)

    archiveName = "Groovesquid"
}

assemble.dependsOn.remove(createDmg)

launch4j {
    mainClassName = "com.groovesquid.Groovesquid"
    icon = "../../gradle/icon/icon.ico"
    launch4jCmd = "/usr/local/bin/launch4j"
    jar = "lib/" + project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files.getSingleFile().name
}

shadowJar {
    classifier = ''
}
